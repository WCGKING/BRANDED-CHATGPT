from pyrogram import Client, filters,enums,idle
from pyrogram.errors import ApiIdInvalid, ApiIdPublishedFlood, AccessTokenInvalid
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.enums import ChatAction, ParseMode
import openai
from pyrogram.types import CallbackQuery
from config import *
import os,sys,re,requests
import asyncio,time
from random import choice
from bardapi import Bard
from datetime import datetime
import logging

FORMAT = "[BRANDED] %(message)s"
logging.basicConfig(
    level=logging.WARNING, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


StartTime = time.time()
BRANDED = Client(
    "chat-gpt" ,
    api_id = API_ID,
    api_hash = API_HASH ,
    bot_token = BOT_TOKEN
)
START = f"""
‡πè  ú·¥á è, …™ ·¥Ä·¥ç {BOT_NAME}

‚ûª ·¥Ä…¥ ·¥è·¥ò·¥á…¥-·¥Ä…™- ô·¥Äs·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ…¢·¥ò·¥õ
‚òÖ …™ ·¥Ñ·¥Ä…¥ ·¥Ä…¥s·¥°·¥á Ä  è·¥è·¥ú Ä «´·¥ús·¥õ…™·¥è…¥ ·¥á·¥Äs…™ ü è

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

‚ûª …™ ·¥Ä·¥ç ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á  ô·¥è·¥õ ·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ 
‚òÖ ·¥Ä…¥s·¥°·¥á Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä…™·¥ás ·¥á·¥Äs ü…™ è

‚úÆ R·¥á·¥Ä·¥Ö T ú·¥á  ú·¥á ü·¥ò s·¥á·¥Ñ·¥õ…™·¥è…¥ “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è

‚òÖ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á  ô è : [ ô Ä·¥Ä…¥·¥Ö·¥á·¥Ö Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ](https://t.me/BRANDED_WORLD)
‡πè ·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥ò ·¥ús·¥á /help
"""
xa = bytearray.fromhex("68747470733a2f2f6769746875622e636f6d2f444158585445414d2f4441585843484154475054").decode()
SOURCE = xa
SOURCE_TEXT = f"""
‡πè  ú·¥á è, …™ ·¥Ä·¥ç [{BOT_NAME}]
‚ûª ·¥Ä…¥ ·¥è·¥ò·¥á…¥-·¥Ä…™- ô·¥Äs·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ…¢·¥ò·¥õ
‚òÜ …™ ·¥Ñ·¥Ä…¥ ·¥Ä…¥s·¥°·¥á Ä  è·¥è·¥ú Ä «´·¥ú·¥Ä·¥õ…™·¥è…¥ ·¥á·¥Äs ü…™ è

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú·¥á s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á
"""


x=["‚ù§Ô∏è","üéâ","‚ú®","ü™∏","üéâ","üéà","üéØ"]
g=choice(x)
MAIN = [
    [
        InlineKeyboardButton(text="‚òÜ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ‚òÜ" , url=f"https://t.me/BRANDRD_BOT"),
        InlineKeyboardButton(text="‚òÜ Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚òÜ", url=f"https://t.me/BRANDED_WORLD"),
    ],
    [
        InlineKeyboardButton(
            text="„Äê+„Äë ·¥Ä·¥Ö·¥Ö ·¥ç·¥á  ô·¥Ä ô è „Äê+„Äë",
            url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
        ),
    ],
    [
        InlineKeyboardButton(text="‚ô•  ú·¥á ü·¥ò & ·¥Ñ·¥ç·¥Ös ‚ô•", callback_data="HELP"),
    ],
    [
        InlineKeyboardButton(text="‚òÜ  ú·¥á Ä·¥è·¥ã·¥ú ‚òÜ", url=f"https://t.me/BRANDED_PAID_CC"),
        InlineKeyboardButton(text="‚òÜ ·¥è·¥°…¥·¥á Ä ‚òÜ", url=f"https://t.me/BRANDEDKING8"),
    ],
]
X = [
    [
        InlineKeyboardButton(text="‚òÜ ·¥è·¥°…¥·¥á Ä ‚òÜ", url=f"https://t.me/BRANDEDKING8"),
              
        InlineKeyboardButton(text="‚òÜ Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚òÜ", url=f"https://t.me/BRANDED_WORLD"),
    ]
    ]
    
PNG_BTN = [
    [
         InlineKeyboardButton(
             text="„Äê+„Äë·¥Ä·¥Ö·¥Ö ·¥ç·¥á  ô·¥Ä ô è „Äê+„Äë",
             url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
         ),
     ],
     [
         InlineKeyboardButton(text="‚òÜ Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚òÜ", 
                              url=f"https://t.me/BRANDED_WORLD",
         ),
     ],
]
SOURCE_BUTTONS = InlineKeyboardMarkup([[InlineKeyboardButton(' Ä·¥á·¥ò·¥è' , url=f"https://telegra.ph//file/5374701ae0678848e9631.mp4")]])
HELP_READ = "**‚ûª ·¥ús·¥Ä…¢·¥á** /chatgpt <prompt>\n\n  ú·¥á ü·¥ò: `/chatgpt Space then write your question.`\n\n**‚ûª ·¥ús·¥Ä…¢·¥á** : /generate <prompt> \n·¥áx·¥Ä·¥ç·¥ò ü·¥á: `/generate a book photo`  \n\n‚ûª ·¥ús·¥Ä…¢·¥á /lyrics :  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä·¥ú·¥Ö…™·¥è Íú∞…™ ü·¥á ·¥õ·¥è ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ  ü è Ä…™·¥ÑÍú±**‚ûª ·¥ús·¥Ä…¢·¥á /ping ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥ò…™…¥…¢ ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.**\n\n¬©Ô∏è ·¥è·¥°…¥·¥á Ä : [ ô Ä·¥Ä…¥·¥Ö·¥á·¥Ö ·¥ã…™…¥…¢](https://t.me/BRANDEDKING82) **"
HELP_BACK = [
     [
           InlineKeyboardButton(text="‚òÖ Q·¥ú·¥áÍú±·¥õ…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ…¢·¥ò·¥õ ·¥Ñ·¥Ä…¥ Íú±·¥è ü·¥†·¥á ‚òÖ", url=f"https://t.me/BRANDED_WORLD"),
           
     ],
    [
           InlineKeyboardButton(text="‚òÖ  ô·¥Ä·¥Ñ·¥ã ‚òÖ", callback_data="HELP_BACK"),
    ],
]

  
#         start
@BRANDED.on_message(filters.command(["start",f"start@{BOT_USERNAME}"]))
async def start(client, m: Message):
    try:
        accha = await m.reply_text(
                        text = f"{g}")
        await asyncio.sleep(0.2)
        await accha.edit("s·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥Ñ ú·¥Ä·¥õ …¢·¥ò·¥õ  ô·¥è·¥õ üíòüåπ..")
        await asyncio.sleep(0.2)
        await accha.delete()
        umm = await m.reply_sticker(
                  sticker = STKR,
        )
        await asyncio.sleep(0.3)
        await umm.delete()
        await m.reply_photo(
            photo = START_IMG,
            caption=START,
            reply_markup=InlineKeyboardMarkup(MAIN),
        )
    except Exception as y:
        await m.reply(y)
#  callback 
@BRANDED.on_callback_query()
async def cb_handler(Client, query: CallbackQuery):
    if query.data == "HELP":
     await query.message.edit_text(
                      text = HELP_READ,
                      reply_markup = InlineKeyboardMarkup(HELP_BACK),
     )
    elif query.data == "HELP_BACK":
            await query.message.edit(text = START,
                  reply_markup=InlineKeyboardMarkup(MAIN),
        )
    
@BRANDED.on_message(filters.command(["help", f"help@{BOT_USERNAME}"], prefixes=["","+", ".", "/", "-", "?", "$"]))
async def restart(client, message):
    hmm = await message.reply_photo(START_IMG,
                        caption=HELP_READ,
                        reply_markup= InlineKeyboardMarkup(HELP_BACK),
       )
@BRANDED.on_message(filters.command(['source', 'repo'], prefixes=["","+", ".", "/", "-", "?", "$"]))
async def source(bot, m):
    
    await m.reply_photo(START_IMG, caption=SOURCE_TEXT, reply_markup=SOURCE_BUTTONS)
#  alive
@BRANDED.on_message(filters.command(["ping","alive"], prefixes=["+", "/", "-", "?", "$", "&","."]))
async def ping(client, message: Message):
        start = datetime.now()
        t = "·¥Ä…™  ô·¥è·¥õ ·¥Ä ü…™·¥†…™…¥…¢..."
        txxt = await message.reply(t)
        await asyncio.sleep(0.25)
        await txxt.edit_text("·¥Ä…™  ô·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö......")
        await asyncio.sleep(0.35)
        await txxt.delete()
        end = datetime.now()
        ms = (end-start).microseconds / 1000
        await message.reply_photo(
                             photo=START_IMG,
                             caption=f" ú·¥á è  ô·¥Ä ô è!!\n**[{BOT_NAME}](t.me/{BOT_USERNAME}) …™Íú± ·¥Ä ü…™·¥†·¥á ü•Ä ·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ã…™…¥…¢ Íú∞…™…¥·¥á ·¥°…™·¥õ ú s·¥ò·¥á·¥á·¥Ö ·¥èÍú∞ \n‚û• `{ms}` ms\n\n**·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù£Ô∏è  ô è || [ ô Ä·¥Ä…¥·¥Ö·¥á·¥Ö ·¥ã…™…¥…¢](https://t.me/BRANDEDKING8)||",
                             reply_markup=InlineKeyboardMarkup(PNG_BTN),
       )

#  main   
openai.api_key = OPENAI_KEY
@BRANDED.on_message(filters.command(["chatgpt","ai","ask","a"],  prefixes=["+", ".", "/", "-", "?", "$","#","&"]))
async def chat(bot, message):
    
    try:
        start_time = time.time()
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        if len(message.command) < 2:
            await message.reply_text(
            "HELP:**\n\n` ü…™·¥ã ú·¥è ·¥úÍú±·¥ã·¥á  ô·¥Ä·¥Ä·¥Ö Íú±·¥ò·¥Ä·¥Ñ·¥á ·¥õ ú·¥á…¥ ·¥Ä·¥Ä·¥ò…¥·¥Ä Q·¥ú·¥áÍú±·¥õ…™·¥è…¥ ·¥ò·¥ú·¥Ñ ú·¥è`")
        else:
            a = message.text.split(' ', 1)[1]
            MODEL = "gpt-3.5-turbo"
            resp = openai.ChatCompletion.create(model=MODEL,messages=[{"role": "user", "content": a}],
    temperature=0.2)
            x=resp['choices'][0]["message"]["content"]
            end_time = time.time()
            telegram_ping = str(round((end_time - start_time) * 1000, 3)) + " ·¥çs"
            await message.reply_text(f"{message.from_user.first_name} ·¥ÄÍú±·¥ã·¥á·¥Ö:\n\n {a} \n\n {BOT_NAME} ·¥Ä…¥Íú±·¥°·¥á Ä·¥á·¥Ö:-\n\n {x}\n\n‚ú®·¥õ…™·¥ç·¥á ·¥õ·¥Ä·¥ã·¥á…¥  {telegram_ping} \n\nüéâ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è @{BOT_USERNAME} ", parse_mode=ParseMode.MARKDOWN,reply_markup=InlineKeyboardMarkup(X))     
    except Exception as e:
        await message.reply_text(f"**·¥á Ä Ä·¥è Ä: {e} ")

#  bard 

'''bard = Bard(token=BARD_TOKEN)   
@BRANDED.on_message(filters.command("bard"))
async def bard_bot(bot, message):
    try:
        start_time = time.time()
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        if len(message.command) < 2:
            await message.reply_text(
            "Example:**\n\n` /bard How r u? `")
        else:
            a = message.text.split(' ', 1)[1]
            response=bard.get_answer(f"{a}")["content"]
            await message.reply_text(f"{response}\n\nüéâ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è @{BOT_USERNAME} ", parse_mode=ParseMode.MARKDOWN,reply_markup=InlineKeyboardMarkup(X))     
    except Exception as e:
        await message.reply_text(f"**·¥á Ä Ä·¥è Ä:  {e} ")

    '''
openai.api_key = OPENAI_KEY
@BRANDED.on_message(filters.command(["image","photo","img","generate"],  prefixes=["+", ".", "/", "-", "?", "$","#","&"] ))
async def chat(bot, message):
    try:
        start_time = time.time()
        await bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_PHOTO)
        if len(message.command) < 2:
            await message.reply_text(
            "**Example:**\n\n`/generate image name what do you want`")
        else:
            a = message.text.split(' ', 1)[1]
            response= openai.Image.create(prompt=a ,n=1,size="2192x1924")
            image_url = response['data'][0]['url']
            end_time = time.time()
            telegram_ping = str(round((end_time - start_time) * 1000, 3)) + " ·¥çs"
            await message.reply_photo(image_url,caption=f"‚ú®·¥õ…™·¥ç·¥á ·¥õ·¥Ä·¥ã·¥á…¥ {telegram_ping} ",parse_mode=ParseMode.DISABLED,reply_markup=InlineKeyboardMarkup(X)) 
    except Exception as e:
            await message.reply_text(f"**·¥á Ä Ä·¥è Ä: **  ` {e} `")
openai.api_key = OPENAI_KEY
@BRANDED.on_message(filters.command(["text","audiototext","lyrics"],  prefixes=["","+", ".", "/", "-", "?", "$","#","&"]))
async def chat(bot, message):
    
    try:
        start_time = time.time()
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        if message.reply_to_message and message.reply_to_message.media:
            
            m = await message.reply_to_message.download(file_name="BRANDED.mp3")
            audio_file = open(m, "rb")
            transcript = openai.Audio.transcribe("whisper-1", audio_file)
            x=transcript["text"]
            end_time = time.time()
            telegram_ping = str(round((end_time - start_time) * 1000, 3)) + " ·¥çs"
            await message.reply_text(f"`{x}` \n ‚ú®·¥õ…™·¥ç·¥á ·¥õ·¥Ä·¥ã·¥á…¥ {telegram_ping}")     
    except Exception as e:
        await message.reply_text(f"**·¥á Ä Ä·¥è Ä: **  ` {e} `")



s = bytearray.fromhex("68747470733a2f2f6769746875622e636f6d2f444158585445414d2f4441585843484154475054").decode()

if SOURCE != s:
    print("·¥ã·¥Ä Ä  ü…™ è·¥Ä ·¥á·¥Ö…™·¥õ·¥ç…™ ü …¢·¥Ä è·¥Ä Íú±·¥ú·¥ã·¥è·¥è…¥ ·¥ä·¥áÍú±·¥Ä ·¥õ ú·¥Ä ·¥°·¥áÍú±·¥Ä ·¥ã·¥Ä Ä·¥Ö·¥á ` https://github.com/WCGKING/BRANDED-CHATGPT")
    sys.exit(1)  


if __name__ == "__main__":
    print(f""" {BOT_NAME} …™s ·¥Ä ü…™·¥†·¥á!
    """)
    try:
        BRANDED.start()
        
        
    except (ApiIdInvalid, ApiIdPublishedFlood):
        raise Exception("Your API_ID/API_HASH is not valid.")
    except AccessTokenInvalid:
        raise Exception("Your BOT_TOKEN is not valid.")
    print(f"""JOIN [üçë ‚ãÜ  è·¥è·¥ú Ä  ô Ä·¥Ä…¥·¥Ö·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ…¢·¥ò·¥õ  ô·¥è·¥õ Íú±·¥õ·¥Ä Ä·¥õ ‚ãÜ üçë]
    ‚òÖ¬∑.¬∑¬¥¬Ø`¬∑.¬∑‚òÖ·¥õ ú…™Íú±  Ä·¥á·¥ò·¥è ·¥ç·¥Ä·¥Ö·¥á  ô è  ô Ä·¥Ä…¥·¥Ö·¥á·¥Ö ·¥ã…™…¥…¢ ‚òÖ¬∑.¬∑¬¥¬Ø`¬∑.¬∑‚òÖ
 {BOT_NAME} …™s ·¥Ä ü…™·¥†·¥á!  
    """)
    idle()
    BRANDED.stop()
    print("*‚òÜ*  ô Ä·¥Ä…¥·¥Ö·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ…¢·¥ò·¥õ  ô·¥è·¥õ Íú±·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥Ä…¥·¥ãÍú± Íú∞·¥è Ä ·¥úÍú±…™…¥…¢ ·¥õ ú…™Íú±  Ä·¥á·¥ò·¥è @BARNDRD_BOT @BRANDED_WORLD @BRANDED_PAID_CC *‚òÜ* !")
